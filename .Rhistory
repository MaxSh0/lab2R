library(Rglpk)
## Simple linear program.
## maximize: 2 x_1 + 4 x_2 + 3 x_3
## subject to: 3 x_1 + 4 x_2 + 2 x_3 <= 60
## 2 x_1 + x_2 + 2 x_3 <= 40
## x_1 + 3 x_2 + 2 x_3 <= 80
## x_1, x_2, x_3 are non-negative real numbers
obj <- c(2, 4, 3)
mat <- matrix(c(3, 2, 1, 4, 1, 3, 2, 2, 2), nrow = 3)
dir <- c("<=", "<=", "<=")
rhs <- c(60, 40, 80)
max <- TRUE
Rglpk_solve_LP(obj, mat, dir, rhs, max = max)
## Simple mixed integer linear program.
## maximize: 3 x_1 + 1 x_2 + 3 x_3
## subject to: -1 x_1 + 2 x_2 + x_3 <= 4
## 4 x_2 - 3 x_3 <= 2
## x_1 - 3 x_2 + 2 x_3 <= 3
## x_1, x_3 are non-negative integers
## x_2 is a non-negative real number
obj <- c(3, 1, 3)
mat <- matrix(c(-1, 0, 1, 2, 4, -3, 1, -3, 2), nrow = 3)
dir <- c("<=", "<=", "<=")
rhs <- c(4, 2, 3)
types <- c("I", "C", "I")
max <- TRUE
Rglpk_solve_LP(obj, mat, dir, rhs, types = types, max = max)
## Same as before but with bounds replaced by
## -Inf < x_1 <= 4
## 0 <= x_2 <= 100
## 2 <= x_3 < Inf
bounds <- list(lower = list(ind = c(1L, 3L), val = c(-Inf, 2)),
upper = list(ind = c(1L, 2L), val = c(4, 100)))
Rglpk_solve_LP(obj, mat, dir, rhs, bounds, types, max)
View(mat)
View(bounds)
View(bounds)
## Simple linear program.
## maximize: 2 x_1 + 4 x_2 + 3 x_3
## subject to: 3 x_1 + 4 x_2 + 2 x_3 <= 60
## 2 x_1 + x_2 + 2 x_3 <= 40
## x_1 + 3 x_2 + 2 x_3 <= 80
## x_1, x_2, x_3 are non-negative real numbers
obj <- c(2, 4, 3)
mat <- matrix(c(3, 2, 1, 4, 1, 3, 2, 2, 2), nrow = 3)
dir <- c("<=", "<=", "<=")
rhs <- c(60, 40, 80)
max <- TRUE
Rglpk_solve_LP(obj, mat, dir, rhs, max = max)
library("Rglpk")
library("Rglpk")
library("slam")
obj <- c(2, 4, 3)
> mat <- matrix(c(3, 2, 1, 4, 1, 3, 2, 2, 2), nrow = 3)
> dir <- c("<=", "<=", "<=")
> rhs <- c(60, 40, 80)
> max <- TRUE
>
> Rglpk_solve_LP(obj, mat, dir, rhs, max = max)
obj <- c(2, 4, 3)
mat <- matrix(c(3, 2, 1, 4, 1, 3, 2, 2, 2), nrow = 3)
dir <- c("<=", "<=", "<=")
rhs <- c(60, 40, 80)
max <- TRUE
Rglpk_solve_LP(obj, mat, dir, rhs, max = max)
obj <- c(10, 14, 12)
mat <- matrix(c(2, 1, 7, 4, 4, 8, 4, 6, 5, 6, 5, 7), nrow = 4)
dir <- c("<=", "<=", "<=","<=")
rhs <- c(120, 280, 240, 360)
max <- TRUE
Rglpk_solve_LP(obj, mat, dir, rhs, max = max)
library("Rglpk")
library("slam")
#задача линейного программирования (1)
obj <- c(10, 14, 12)
mat <- matrix(c(2, 1, 7, 4, 4, 8, 4, 6, 5, 6, 5, 7), nrow = 4)
dir <- c("<=", "<=", "<=","<=")
rhs <- c(120, 280, 240, 360)
max <- TRUE
Rglpk_solve_LP(obj, mat, dir, rhs, max = max)
#транспортная задача
m = 3
n = 4
costs = matrix(c(2,3,4,3,5,3,1,2,4,1,4,2), ncol = n, byrow=TRUE)
direction = c("min", "max")
row.signs=c("=","=","=")
col.signs=c("=","=","=","=")
row.rhs=c(90,60,150)
col.rhs=c(120,40,60,80)
library("lpSolve")
mysolution = lp.transport (costs, "min", row.signs,row.rhs, col.signs, col.rhs)
summary(mysolution)
mysolution$objval
install.packages("lpSolve")
#транспортная задача
m = 3
n = 4
costs = matrix(c(2,3,4,3,5,3,1,2,4,1,4,2), ncol = n, byrow=TRUE)
direction = c("min", "max")
row.signs=c("=","=","=")
col.signs=c("=","=","=","=")
row.rhs=c(90,60,150)
col.rhs=c(120,40,60,80)
library("lpSolve")
mysolution = lp.transport (costs, "min", row.signs,row.rhs, col.signs, col.rhs)
summary(mysolution)
mysolution$objval
m = 3
n = 4
costs = matrix(c(2,3,4,3,5,3,1,2,4,1,4,2), ncol = n, byrow=TRUE)
direction = c("min", "max")
row.signs=c("=","=","=")
col.signs=c("=","=","=","=")
row.rhs=c(90,60,150)
col.rhs=c(120,40,60,80)
library("lpSolve")
mysolution = lp.transport (costs, "min", row.signs,row.rhs, col.signs, col.rhs)
summary(mysolution)
mysolution$solution
mysolution$objval
library("Rglpk")
library("slam")
#задача линейного программирования (1)
obj <- c(10, 14, 12)
mat <- matrix(c(2, 1, 7, 4, 4, 8, 4, 6, 5, 6, 5, 7), nrow = 4)
dir <- c("<=", "<=", "<=","<=")
rhs <- c(120, 280, 240, 360)
max <- TRUE
Rglpk_solve_LP(obj, mat, dir, rhs, max = max)
